import com.poly.dnshelper.Util.parseToCorrectForm
import com.poly.dnshelper.model.DNSFlags
import com.poly.dnshelper.model.DNSMessage
import com.poly.dnshelper.model.DNSQuery
import com.poly.dnshelper.model.answer.DNSAnswerA
import org.junit.Test

class DNSMessageTest {

    @Test
    fun dnsMessageTest() {
        val dnsFlags = DNSFlags(
            isResponse = true,
            opCode = 1,
            aa = true,
            truncated = true,
            recursionDesired = false,
            recursionAccepted = true,
            rCode = 8
        )
        val dnsMessage = DNSMessage(
            transactionId = 10,
            dnsFlags = dnsFlags,
            numOfQuestions = 4,
            answerRRs = 3,
            authorityRRs = 2,
            additionalRRs = 1,
            listOf(
                DNSQuery(
                    name = "dns.dns.dns",
                    type = 1,
                    queryClass = 1
                )
            ),
            listOf()
        )
        val dnsMessageWithAnswer = DNSMessage(
            transactionId = 10,
            dnsFlags = dnsFlags,
            numOfQuestions = 4,
            answerRRs = 3,
            authorityRRs = 2,
            additionalRRs = 1,
            listOf(
                DNSQuery(
                    name = "dns.dns.dns",
                    type = 1,
                    queryClass = 1
                )
            ),
            listOf(
                DNSAnswerA(
                    name = "dns.dns.dns",
                    type = 1,
                    dnsClass = 1,
                    timeToLive = 2,
                    dataLength = 15,
                    resourceData = byteArrayOf()
                )
            )
        )
        val finalArray = dnsMessage.getMessageBytes()
        val finalArrayWithMessage = dnsMessageWithAnswer.getMessageBytes()
//        finalArray.forEach {
//            forPrint(it)
//        }
        finalArrayWithMessage.forEach {
            parseToCorrectForm(it)
        }
        val newDns = DNSMessage()
        newDns.mapperMessage(finalArray)
        println(newDns)
        val newDnsWithAnswer = DNSMessage()
        newDnsWithAnswer.mapperMessage(finalArrayWithMessage, dnsMessage)
        println(newDnsWithAnswer)

//        printItLikeWireShark(finalArray, false)

    }

    private fun printItLikeWireShark(bytes: ByteArray, isAnswer: Boolean) {
        if (isAnswer) {
            throw UnsupportedOperationException()
        }
        for (i in bytes.indices) {
            if (i < 2) {
                println("Trans ID: " + getStringBytes(bytes[i]))
            }
            if (i in 2..3) {
                println("Flags: " + getStringBytes(bytes[i]))
            }
            if (i in 4..5) {
                println("Questions number: " + getStringBytes(bytes[i]))
            }
            if (i in 6..7) {
                println("AnswerRRs: " + getStringBytes(bytes[i]))
            }
            if (i in 8..9) {
                println("AuthorityRRs: " + getStringBytes(bytes[i]))
            }
            if (i in 10..11) {
                println("AdditionalRRs: " + getStringBytes(bytes[i]))
            }
            if (i >= 12) {
                println("Questions: " + getStringBytes(bytes[i]))
            }
        }
    }


    @Test
    fun testAnswer() {
        val byteArray = ubyteArrayOf(
            0x00u, 0x6fu, 0x81u, 0x80u,
            0x00u, 0x01u, 0x00u, 0x01u,
            0x00u, 0x00u, 0x00u, 0x00u,
            0x02u, 0x79u, 0x61u, 0x02u,
            0x72u, 0x75u, 0x00u, 0x00u,
            0x01u, 0x00u, 0x01u, 0xc0u,
            0x0cu, 0x00u, 0x01u, 0x00u,
            0x01u, 0x00u, 0x00u, 0x02u,
            0x06u, 0x00u, 0x04u, 0x57u,
            0xfau, 0xfau, 0xf2u
        )
        val prevMessage = DNSMessage(
            transactionId = 111,
            dnsFlags = DNSFlags(
                false,
                0,
                aa = false,
                truncated = false,
                recursionDesired = true,
                recursionAccepted = false,
                rCode = 0
            ),
            numOfQuestions = 1,
            answerRRs = 0,
            authorityRRs = 0,
            additionalRRs = 0,
            questions = listOf(DNSQuery("ya.ru", 1, 1)),
            answers = listOf()
        )
        val message = DNSMessage()
        message.mapperMessage(byteArray.toByteArray(), prevMessage)
        println(message)
    }

    private fun getStringBytes(byte: Byte): String {
        return parseToCorrectForm(byte)
    }

    @Test
    fun testAnswerTXT() {
        val byteArray = ubyteArrayOf(
            0x00u, 0x6fu, 0x81u, 0x80u, 0x00u, 0x01u, 0x00u, 0x03u, 0x00u, 0x00u,
            0x00u, 0x00u, 0x02u, 0x79u, 0x61u, 0x02u, 0x72u, 0x75u, 0x00u, 0x00u,
            0x10u, 0x00u, 0x01u, 0xc0u, 0x0cu, 0x00u, 0x10u, 0x00u, 0x01u, 0x00u,
            0x00u, 0x03u, 0xb7u, 0x00u, 0x1fu, 0x1eu, 0x76u, 0x3du, 0x73u, 0x70u,
            0x66u, 0x31u, 0x20u, 0x72u, 0x65u, 0x64u, 0x69u, 0x72u, 0x65u, 0x63u,
            0x74u, 0x3du, 0x5fu, 0x73u, 0x70u, 0x66u, 0x2eu, 0x79u, 0x61u, 0x6eu,
            0x64u, 0x65u, 0x78u, 0x2eu, 0x72u, 0x75u, 0xc0u, 0x0cu, 0x00u, 0x10u,
            0x00u, 0x01u, 0x00u, 0x00u, 0x03u, 0xb7u, 0x00u, 0x4bu, 0x4au, 0x5fu,
            0x67u, 0x6cu, 0x6fu, 0x62u, 0x61u, 0x6cu, 0x73u, 0x69u, 0x67u, 0x6eu,
            0x2du, 0x64u, 0x6fu, 0x6du, 0x61u, 0x69u, 0x6eu, 0x2du, 0x76u, 0x65u,
            0x72u, 0x69u, 0x66u, 0x69u, 0x63u, 0x61u, 0x74u, 0x69u, 0x6fu, 0x6eu,
            0x3du, 0x64u, 0x48u, 0x6fu, 0x65u, 0x35u, 0x38u, 0x30u, 0x62u, 0x50u,
            0x51u, 0x2du, 0x6cu, 0x66u, 0x69u, 0x5fu, 0x76u, 0x68u, 0x2du, 0x42u,
            0x45u, 0x49u, 0x77u, 0x42u, 0x34u, 0x4eu, 0x41u, 0x74u, 0x55u, 0x77u,
            0x55u, 0x52u, 0x49u, 0x7au, 0x72u, 0x7au, 0x73u, 0x69u, 0x76u, 0x42u,
            0x79u, 0x56u, 0x4cu, 0xc0u, 0x0cu, 0x00u, 0x10u, 0x00u, 0x01u, 0x00u,
            0x00u, 0x03u, 0xb7u, 0x00u, 0x41u, 0x40u, 0x38u, 0x35u, 0x63u, 0x62u,
            0x38u, 0x61u, 0x34u, 0x63u, 0x61u, 0x38u, 0x64u, 0x37u, 0x64u, 0x35u,
            0x31u, 0x31u, 0x36u, 0x34u, 0x31u, 0x66u, 0x64u, 0x64u, 0x35u, 0x30u,
            0x37u, 0x30u, 0x38u, 0x38u, 0x39u, 0x33u, 0x62u, 0x37u, 0x64u, 0x37u,
            0x33u, 0x61u, 0x61u, 0x65u, 0x64u, 0x34u, 0x34u, 0x31u, 0x61u, 0x33u,
            0x63u, 0x39u, 0x62u, 0x64u, 0x35u, 0x61u, 0x35u, 0x33u, 0x64u, 0x30u,
            0x62u, 0x63u, 0x30u, 0x32u, 0x32u, 0x65u, 0x35u, 0x63u, 0x34u, 0x34u
        )
        val prevMessage = DNSMessage(
            transactionId = 111,
            dnsFlags = DNSFlags(
                false,
                0,
                aa = false,
                truncated = false,
                recursionDesired = true,
                recursionAccepted = false,
                rCode = 0
            ),
            numOfQuestions = 1,
            answerRRs = 0,
            authorityRRs = 0,
            additionalRRs = 0,
            questions = listOf(DNSQuery("ya.ru", 16, 1)),
            answers = listOf()
        )
        val message = DNSMessage()
        message.mapperMessage(byteArray.toByteArray(), prevMessage)
        println(message)
    }

    @Test
    fun testAnswerA() {
        val byteArray = ubyteArrayOf(
            0x00u, 0x6fu, 0x81u, 0x80u, 0x00u, 0x01u, 0x00u, 0x06u, 0x00u, 0x00u,
            0x00u, 0x00u, 0x06u, 0x67u, 0x6fu, 0x6fu, 0x67u, 0x6cu, 0x65u, 0x03u,
            0x63u, 0x6fu, 0x6du, 0x00u, 0x00u, 0x01u, 0x00u, 0x01u, 0xc0u, 0x0cu,
            0x00u, 0x01u, 0x00u, 0x01u, 0x00u, 0x00u, 0x01u, 0x07u, 0x00u, 0x04u,
            0xadu, 0xc2u, 0xdeu, 0x65u, 0xc0u, 0x0cu, 0x00u, 0x01u, 0x00u, 0x01u,
            0x00u, 0x00u, 0x01u, 0x07u, 0x00u, 0x04u, 0xadu, 0xc2u, 0xdeu, 0x71u,
            0xc0u, 0x0cu, 0x00u, 0x01u, 0x00u, 0x01u, 0x00u, 0x00u, 0x01u, 0x07u,
            0x00u, 0x04u, 0xadu, 0xc2u, 0xdeu, 0x8bu, 0xc0u, 0x0cu, 0x00u, 0x01u,
            0x00u, 0x01u, 0x00u, 0x00u, 0x01u, 0x07u, 0x00u, 0x04u, 0xadu, 0xc2u,
            0xdeu, 0x8au, 0xc0u, 0x0cu, 0x00u, 0x01u, 0x00u, 0x01u, 0x00u, 0x00u,
            0x01u, 0x07u, 0x00u, 0x04u, 0xadu, 0xc2u, 0xdeu, 0x64u, 0xc0u, 0x0cu,
            0x00u, 0x01u, 0x00u, 0x01u, 0x00u, 0x00u, 0x01u, 0x07u, 0x00u, 0x04u,
            0xadu, 0xc2u, 0xdeu, 0x66u
        )
        val prevMessage = DNSMessage(
            transactionId = 111,
            dnsFlags = DNSFlags(
                false,
                0,
                aa = false,
                truncated = false,
                recursionDesired = true,
                recursionAccepted = false,
                rCode = 0
            ),
            numOfQuestions = 1,
            answerRRs = 0,
            authorityRRs = 0,
            additionalRRs = 0,
            questions = listOf(DNSQuery("google.com", 1, 1)),
            answers = listOf()
        )
        val message = DNSMessage()
        message.mapperMessage(byteArray.toByteArray(), prevMessage)
        println(message)
    }

    @Test
    fun testAnswerAAAA() {
        val byteArray = ubyteArrayOf(
            0x00u, 0x6fu, 0x81u, 0x80u, 0x00u, 0x01u, 0x00u, 0x04u, 0x00u, 0x00u, 0x00u, 0x00u,
            0x06u, 0x67u, 0x6fu, 0x6fu, 0x67u, 0x6cu, 0x65u, 0x03u, 0x63u, 0x6fu, 0x6du, 0x00u,
            0x00u, 0x1cu, 0x00u, 0x01u, 0xc0u, 0x0cu, 0x00u, 0x1cu, 0x00u, 0x01u, 0x00u, 0x00u,
            0x01u, 0x2cu, 0x00u, 0x10u, 0x2au, 0x00u, 0x14u, 0x50u, 0x40u, 0x10u, 0x0cu, 0x0bu,
            0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x8bu, 0xc0u, 0x0cu, 0x00u, 0x1cu,
            0x00u, 0x01u, 0x00u, 0x00u, 0x01u, 0x2cu, 0x00u, 0x10u, 0x2au, 0x00u, 0x14u, 0x50u,
            0x40u, 0x10u, 0x0cu, 0x0bu, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x66u,
            0xc0u, 0x0cu, 0x00u, 0x1cu, 0x00u, 0x01u, 0x00u, 0x00u, 0x01u, 0x2cu, 0x00u, 0x10u,
            0x2au, 0x00u, 0x14u, 0x50u, 0x40u, 0x10u, 0x0cu, 0x0bu, 0x00u, 0x00u, 0x00u, 0x00u,
            0x00u, 0x00u, 0x00u, 0x8au, 0xc0u, 0x0cu, 0x00u, 0x1cu, 0x00u, 0x01u, 0x00u, 0x00u,
            0x01u, 0x2cu, 0x00u, 0x10u, 0x2au, 0x00u, 0x14u, 0x50u, 0x40u, 0x10u, 0x0cu, 0x0bu,
            0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x65u
        )
        val prevMessage = DNSMessage(
            transactionId = 111,
            dnsFlags = DNSFlags(
                false,
                0,
                aa = false,
                truncated = false,
                recursionDesired = true,
                recursionAccepted = false,
                rCode = 0
            ),
            numOfQuestions = 1,
            answerRRs = 0,
            authorityRRs = 0,
            additionalRRs = 0,
            questions = listOf(DNSQuery("google.com", 28, 1)),
            answers = listOf()
        )
        val message = DNSMessage()
        message.mapperMessage(byteArray.toByteArray(), prevMessage)
        println(message)
    }

    @Test
    fun testAnswerMX() {
        val byteArray = ubyteArrayOf(
            0x00u, 0x6fu, 0x81u, 0x80u, 0x00u, 0x01u, 0x00u, 0x05u, 0x00u, 0x00u,
            0x00u, 0x00u, 0x06u, 0x67u, 0x6fu, 0x6fu, 0x67u, 0x6cu, 0x65u, 0x03u,
            0x63u, 0x6fu, 0x6du, 0x00u, 0x00u, 0x0fu, 0x00u, 0x01u, 0xc0u, 0x0cu,
            0x00u, 0x0fu, 0x00u, 0x01u, 0x00u, 0x00u, 0x01u, 0xd2u, 0x00u, 0x11u,
            0x00u, 0x14u, 0x04u, 0x61u, 0x6cu, 0x74u, 0x31u, 0x05u, 0x61u, 0x73u,
            0x70u, 0x6du, 0x78u, 0x01u, 0x6cu, 0xc0u, 0x0cu, 0xc0u, 0x0cu, 0x00u,
            0x0fu, 0x00u, 0x01u, 0x00u, 0x00u, 0x01u, 0xd2u, 0x00u, 0x09u, 0x00u,
            0x32u, 0x04u, 0x61u, 0x6cu, 0x74u, 0x34u, 0xc0u, 0x2fu, 0xc0u, 0x0cu,
            0x00u, 0x0fu, 0x00u, 0x01u, 0x00u, 0x00u, 0x01u, 0xd2u, 0x00u, 0x09u,
            0x00u, 0x1eu, 0x04u, 0x61u, 0x6cu, 0x74u, 0x32u, 0xc0u, 0x2fu, 0xc0u,
            0x0cu, 0x00u, 0x0fu, 0x00u, 0x01u, 0x00u, 0x00u, 0x01u, 0xd2u, 0x00u,
            0x09u, 0x00u, 0x28u, 0x04u, 0x61u, 0x6cu, 0x74u, 0x33u, 0xc0u, 0x2fu,
            0xc0u, 0x0cu, 0x00u, 0x0fu, 0x00u, 0x01u, 0x00u, 0x00u, 0x01u, 0xd2u,
            0x00u, 0x04u, 0x00u, 0x0au, 0xc0u, 0x2fu
        )
        val prevMessage = DNSMessage(
            transactionId = 111,
            dnsFlags = DNSFlags(
                false,
                0,
                aa = false,
                truncated = false,
                recursionDesired = true,
                recursionAccepted = false,
                rCode = 0
            ),
            numOfQuestions = 1,
            answerRRs = 0,
            authorityRRs = 0,
            additionalRRs = 0,
            questions = listOf(DNSQuery("google.com", 15, 1)),
            answers = listOf()
        )
        val message = DNSMessage()
        message.mapperMessage(byteArray.toByteArray(), prevMessage)
        println(message)
    }

    @Test
    fun testSimpleQuery() {
        val byteArray = ubyteArrayOf(
            0x00u, 0x6fu, 0x01u, 0x00u, 0x00u, 0x01u, 0x00u, 0x00u, 0x00u, 0x00u,
            0x00u, 0x00u, 0x01u, 0x61u, 0x00u, 0x00u, 0x01u, 0x00u, 0x01u
        )

        val message = DNSMessage()
        message.mapperMessage(byteArray.toByteArray(), null)
        println(message)

        for (i in byteArray) {
            print("$i ")
        }
    }

}